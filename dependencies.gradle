ext.app = [
        minSdk    : 23,
        targetSdk : 30,
        compileSdk: 30,
        buildTools: '30.0.3'
]

ext.versionDependency = [
        rchComp       : '1.1.1',
        supportLibrary: '29.0.0',
        rxJava        : '2.2.5',
        javaCompat    : '1.8'
]

def versions = [
        gradlePlugin     : '3.5.4',
        multidex         : '1.0.3',
        kotlin           : '1.4.21',
        supportLibrary   : versionDependency.supportLibrary,
        archComp         : versionDependency.supportLibrary,
        rxJava           : versionDependency.rxJava,
        constraintLayout : '1.1.3',

        dataBinding      : '3.1.0-alpha06',

        navigation       : '2.3.0',

        rxKotlin         : '2.3.0',

        rxAndroid        : '2.1.0',

        dagger           : '2.22.1',

        retrofit         : '2.9.0',
        okHttp           : '3.13.1',
        gson             : '2.8.5',

        javaxInject      : '1',


        jetifier         : '1.0.0-beta04',

        glide            : '4.12.0',
        glideOkHttp      : '4.12.0',
        //Test
        //Test
        robolectric      : '3.4.2',
        junit            : '4.12',
        assertj          : '3.8.0',
        mockitoKotlin2   : '2.2.0',
        mockito          : '2.23.0',
        powerMockito     : '2.0.0-beta.5',
        mockWebServer    : '4.2.1',
        mockkVersion     : '1.9.3',

        //lifecycle
        lifecycle        : '2.0.0',

        timber           : '4.7.1',

        materialComponent: '1.1.0-alpha07',



        timber           : '4.7.1',


        tiffBitmap       : '0.9.8.6',

        permissionLibrary: '1.1.0',

        coroutines       : '1.3.7',

        securityCrypto   : '1.1.0-alpha01'
]


ext.packageId = [
        sampleapp: 'com.sample.assignment',
]

ext.java = [
        sourceCompatibility: JavaVersion.VERSION_1_8,
        targetCompatibility: JavaVersion.VERSION_1_8
]
ext.endpoints = [
        sampleMock: '"https://10.11.1.1/"',
        sampleLive: '"https://baseURlHere/"',
]

def libraries = [
        androidGradlePlugin    : "com.android.tools.build:gradle:$versions.gradlePlugin",
        kotlinGradlePlugin     : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin",
        kotlin                 : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin",
        kotlinReflect          : "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin",
        // Support Libraries
        appCompatV7            : "androidx.appcompat:appcompat:1.0.2",
        cardView               : "com.android.support:cardview-v7:$versions.supportLibrary",
        constraintLayout       : "androidx.constraintlayout:constraintlayout:$versions.constraintLayout",
        // design                  : "com.android.support:design:$versions.supportLibrary",
        dataBinding            : "com.android.databinding:compiler:$versions.dataBinding",
        rxJava                 : "io.reactivex.rxjava2:rxjava:$versions.rxJava",
        rxKotlin               : "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin",
        rxAndroid              : "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid",
        jetifier               : "com.android.tools.build.jetifier:jetifier-processor:$versions.jetifier",
        jetifierCore           : "com.android.tools.build.jetifier:jetifier-core:$versions.jetifier",
        //===================DAGGER
        dagger                 : "com.google.dagger:dagger:$versions.dagger",
        daggerSupport          : "com.google.dagger:dagger-android-support:$versions.dagger",
        daggerCompiler         : "com.google.dagger:dagger-compiler:$versions.dagger",
        daggerProcessor        : "com.google.dagger:dagger-android-processor:$versions.dagger",
        //===========NAVIGATION
        navigationFragment     : "androidx.navigation:navigation-fragment-ktx:$versions.navigation",
        navigationUi           : "androidx.navigation:navigation-ui-ktx:$versions.navigation",
        navigationSafeArgs     : "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation",
        //======Network Libraries
        retrofit               : "com.squareup.retrofit2:retrofit:$versions.retrofit",
        retrofitConverter      : "com.squareup.retrofit2:converter-gson:$versions.retrofit",
        retrofitAdapter        : "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit",
        okHttp                 : "com.squareup.okhttp3:okhttp:$versions.okHttp",
        okHttpLogger           : "com.squareup.okhttp3:logging-interceptor:$versions.okHttp",
        gson                   : "com.google.code.gson:gson:$versions.gson",
        cookieHandler          : "com.squareup.okhttp3:okhttp-urlconnection:3.8.1",


        javaxInject            : "javax.inject:javax.inject:$versions.javaxInject",
        androidAnnotations     : "com.android.support:support-annotations:$versions.supportLibrary",
        //=====Glide
        glide                  : "com.github.bumptech.glide:glide:$versions.glide",
        glideProcessor         : "com.github.bumptech.glide:compiler:$versions.glide",
        glideOkHttpIntegration : "com.github.bumptech.glide:okhttp3-integration:$versions.glideOkHttp",

        materialDialogCore     : "com.afollestad.material-dialogs:core:$versions.materialDialog",
        materialDialogLifeCycle: "com.afollestad.material-dialogs:lifecycle:3.1.0",



        lifecycleExtension     : "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle",
        lifecycleProcessor     : "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle",

        timber                 : "com.jakewharton.timber:timber:$versions.timber",

        materialComponent      : "com.google.android.material:material:$versions.materialComponent",
        timber                 : "com.jakewharton.timber:timber:$versions.timber",

        // tiff bitmap lib
        tiffBitmap             : "com.github.beyka:androidtiffbitmapfactory:$versions.tiffBitmap",

        permissionLibrary      : "com.github.florent37:runtime-permission:$versions.permissionLibrary",
        coroutines             : "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines",

        securityCrypto         : "androidx.security:security-crypto:$versions.securityCrypto",

        //test
        assertj                : "org.assertj:assertj-core:$versions.assertj",
        junit                  : "junit:junit:$versions.junit",
        junitKotlin            : "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin",
        mockitoKotlin2         : "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlin2",
        mockito                : "org.mockito:mockito-core:$versions.mockito",
        archCompiler           : "androidx.arch.core:core-testing:$versions.lifecycle",
        mockWebServer          : "com.squareup.okhttp3:mockwebserver:$versions.mockWebServer",
        mockk                  : "io.mockk:mockk:$versions.mockkVersion",
        powerMockitoJunitRules : "org.powermock:powermock-module-junit4-rule:$versions.powerMockito",
        powerMockitoCore       : "org.powermock:powermock-core:$versions.powerMockito",
        powerMockitoJunit      : "org.powermock:powermock-module-junit4:$versions.powerMockito",
        powerMockitoApi        : "org.powermock:powermock-api-mockito2:$versions.powerMockito",
]

static def addDependency(config, dependency) {
    [configuration: config, dependency: dependency]
}

static def addDependency(config, dependency, options) {
    [configuration: config, dependency: dependency, options: options]
}

ext.addDependencies = {
    DependencyHandler handler, dependencies ->
        dependencies.each {
            if (it.options != null) {
                handler.add(it.configuration, it.dependency, it.options)
            } else {
                handler.add(it.configuration, it.dependency)
            }
        }
}


ext.appDependencies = [

        addDependency('implementation', libraries.kotlin),
        addDependency('implementation', libraries.rxKotlin),
        addDependency('implementation', libraries.rxAndroid),


        addDependency('implementation', libraries.appCompatV7),
        addDependency('implementation', libraries.cardView),
        addDependency('implementation', libraries.constraintLayout),


        addDependency('implementation', libraries.dagger),
        addDependency('implementation', libraries.daggerSupport),
        addDependency('kapt', libraries.daggerCompiler),
        addDependency('kapt', libraries.daggerProcessor),


        addDependency('implementation', libraries.navigationFragment),
        addDependency('implementation', libraries.navigationUi),

        addDependency('implementation', libraries.gson),

        //lifecycle
        addDependency('implementation', libraries.lifecycleExtension),
        addDependency('kapt', libraries.lifecycleProcessor),

        // material components
        addDependency('implementation', libraries.materialComponent),

        //glide
        addDependency('implementation', libraries.glide),
        addDependency('kapt', libraries.glideProcessor),
        addDependency('implementation', libraries.glideOkHttpIntegration),


        addDependency('implementation', libraries.retrofit),
        addDependency('implementation', libraries.retrofitAdapter),
        addDependency('implementation', libraries.retrofitConverter),

        addDependency('implementation', libraries.okHttp),
        addDependency('implementation', libraries.okHttpLogger),
        addDependency('implementation', libraries.gson),
        addDependency('implementation', libraries.cookieHandler),
        addDependency('implementation', libraries.timber),
        addDependency('kapt', libraries.jetifierCore),
        addDependency('implementation', libraries.coroutines),
        addDependency('implementation', libraries.permissionLibrary),

        addDependency('implementation', libraries.securityCrypto),
        //Test
        addDependency('testImplementation', libraries.junit),
        addDependency('testImplementation', libraries.junitKotlin),
        addDependency('testImplementation', libraries.mockitoKotlin2),
        addDependency('testImplementation', libraries.mockito),
        addDependency('testImplementation', libraries.archCompiler),
        addDependency('testImplementation', libraries.powerMockitoJunitRules),
        addDependency('testImplementation', libraries.powerMockitoCore),
        addDependency('testImplementation', libraries.powerMockitoJunit),
        addDependency('testImplementation', libraries.powerMockitoApi),
        addDependency('testImplementation', libraries.mockWebServer),
        addDependency('testImplementation', libraries.mockk),

]


ext.coreDependencies = [
        addDependency('implementation', libraries.kotlin),
        addDependency('implementation', libraries.rxKotlin),
        addDependency('implementation', libraries.rxAndroid),

        addDependency('implementation', libraries.javaxInject),

        addDependency('implementation', libraries.retrofit),
        addDependency('implementation', libraries.retrofitAdapter),
        addDependency('implementation', libraries.retrofitConverter),

        addDependency('implementation', libraries.okHttp),
        addDependency('implementation', libraries.okHttpLogger),

        addDependency('implementation', libraries.gson),

        addDependency('implementation', libraries.dagger),
        // addDependency('implementation', libraries.daggerSupport),
        addDependency('kapt', libraries.daggerCompiler),
        addDependency('kapt', libraries.daggerProcessor),

        addDependency('kapt', libraries.dataBinding),
        addDependency('implementation', libraries.timber),

        addDependency('implementation', libraries.tiffBitmap),

        addDependency('implementation', libraries.coroutines),
        addDependency('implementation', libraries.permissionLibrary),

        //lifecycle
        addDependency('implementation', libraries.lifecycleExtension),
        addDependency('kapt', libraries.lifecycleProcessor),

        //test
        addDependency('testImplementation', libraries.junit),
        addDependency('testImplementation', libraries.junitKotlin),
        addDependency('testImplementation', libraries.mockitoKotlin2),
        addDependency('testImplementation', libraries.mockito),
        addDependency('testImplementation', libraries.archCompiler),
        addDependency('testImplementation', libraries.powerMockitoJunitRules),
        addDependency('testImplementation', libraries.powerMockitoCore),
        addDependency('testImplementation', libraries.powerMockitoJunit),
        addDependency('testImplementation', libraries.powerMockitoApi),
        addDependency('testImplementation', libraries.mockWebServer),
        addDependency('testImplementation', libraries.mockk),

]

ext.gradlePlugins = [
        android           : libraries.androidGradlePlugin,
        kotlin            : libraries.kotlinGradlePlugin,
        jetifier          : libraries.jetifier,
        navigationSafeArgs: libraries.navigationSafeArgs
]



